{
    "comments": [
        {
            "description": "Notify before making changes",
            "author": "Emilia",
            "timestamp": "2023-10-23"
        },
        {
            "description": "Do not use this source in PRODUCTION",
            "author": "Ron",
            "timestamp": "19/10/2023"
        }
    ],
    "description": "Table that contains information about Customers",
    "owners": ["Emilia", "Ron"],
    "categories": ["PII", "Customers"],
    "verified": {
        "description": "This table is verfied",
        "author": "Emilia",
        "timestamp": "2023-10-23"
    },
    "fields": [],
    "query": "SELECT * FROM Categories;",
    "predefinedQueries": [
        "SELECT * FROM Categories;",
        "SELECT categoryID, categoryName FROM Categories;"
      ],
    "queryColumnMap": {
        "SELECT * FROM Categories;": ["*"],
        "SELECT categoryID, categoryName FROM Categories;":["categoryID", "categoryName"]
    },
    "size": "11 kB",
    "rowCount": 22,
    "columnCount": 11,
    "documentation": "\\n# Categories Table\\n\\nThe Categories table is an essential component of a relational database designed to store and manage information related to categorization and classification. It plays a pivotal role in organizing data, making it easier to search, filter, and understand the relationships between different entities. This README provides an overview of the Categories table, its structure, and its purpose within a database.\\n\\n## Table Structure\\n\\nThe Categories table typically consists of one or more columns, each serving a specific purpose:\\n\\n### Category ID (Primary Key)\\n\\n- **Name**: category_id\\n- **Data Type**: Integer\\n- **Description**: This column is a unique identifier for each category. It serves as the primary key of the table, ensuring that each category has a distinct reference.\\n\\n### Category Name\\n\\n- **Name**: name\\n- **Data Type**: String\\n- **Description**: This column stores the name or label of each category. It should be human-readable and descriptive, making it easy to understand the purpose of the category.\\n\\n### Parent Category ID\\n\\n- **Name**: parent_category_id\\n- **Data Type**: Integer\\n- **Description**: This optional column represents the relationship between categories, especially in the case of hierarchical categories. It stores the category ID of the parent category if applicable.\\n\\n### Description\\n\\n- **Name**: description\\n- **Data Type**: Text\\n- **Description**: This column provides a space for additional information or a brief description of the category. It can be useful for documenting the purpose or characteristics of the category.\\n\\n## Purpose\\n\\nThe Categories table serves several crucial purposes within a database:\\n\\n1. **Categorization and Classification**: It allows for the organization and grouping of data into relevant categories, making it easier to manage and analyze information.\\n\\n2. **Data Retrieval**: Categories can be used to filter and retrieve data selectively. This is particularly useful when querying a database to find specific subsets of data.\\n\\n3. **Hierarchical Structures**: When the \\'Parent Category ID\\' column is utilized, the Categories table can represent hierarchical structures, such as nested categories or subcategories.\\n\\n4. **Data Integrity**: By using the \\'Category ID\\' as a primary key, data integrity is maintained, ensuring that each category is uniquely identified.\\n\\n5. **Documentation**: The \\'Description\\' column provides a space to add descriptive information about each category, enhancing documentation and understanding.\\n\\n## Usage Guidelines\\n\\nTo effectively use the Categories table in your database, consider the following guidelines:\\n\\n- **Consistent Naming**: Ensure that category names are consistent and follow a standard naming convention for clarity and ease of use.\\n\\n- **Hierarchical Categories**: If your database needs to support hierarchical categories, use the \\'Parent Category ID\\' column to establish relationships between categories.\\n\\n- **Data Validation**: Implement data validation rules to prevent duplicate categories or inconsistent data entry.\\n\\n- **Documentation**: Use the \\'Description\\' column to document the purpose, characteristics, or any other relevant information about each category.\\n\\n- **Indexes**: Depending on the size of your database, consider adding indexes to columns used frequently in queries, such as \\'Category Name.\\'\\n\\n- **Data Maintenance**: Regularly update and maintain the Categories table as new categories are added or old ones are deprecated.\\n\\n"
}